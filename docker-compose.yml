version: '3.8'

services:
  app:
    build: .
    ports:
      - "4000:4000"
    # `depends_on` now waits for both Postgres and Redis to be healthy before starting.
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - app-network

  postgres:
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_DB: AuthData
      POSTGRES_USER: anees
      POSTGRES_PASSWORD: 1234
    healthcheck:
      # Use `pg_isready` with the correct username and database.
      test: ["CMD-SHELL", "pg_isready -U anees -d AuthData"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - app-network

  redis:
    image: redis:alpine
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

volumes:
  pgdata:

networks:
  app-network:
    driver: bridge